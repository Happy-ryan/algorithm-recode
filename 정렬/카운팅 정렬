#1. 배열에 존재하는 값의 각 원소의 개술르 세어 줄 새로운 배열 count를 만들어준다.
#count의 길이는 워소의 최댓값까지를 인덱스로 사용할 수 있도록 원소의 최댓값+1만큼 정한다
#count[i]는 숫자i가 배열에 몇개 존재하는지에 대한 정보를 담는다.
arr=[4,7,9,1,3,5,2,3,4]
count = [0]*(max(arr)+1)
for num in arr :
    count[num] += 1
print(count) # [0, 1, 1, 2, 2, 1, 0, 1, 0, 1]
#2. count배열의 원소를 누적합 값으로 갱신해준다. 
# 이 작업은 arr에 담긴 원소를 바로 정렬된 위치로 삽입하기 위한 사전작업이다.
for i in range(1, len(count)) :
    count[i] = count[i] + count[i-1]
print(count) # [0, 1, 2, 4, 6, 7, 7, 8, 8, 9]
#3. arr의 길이와 같은 result배열을 만들어준다. 해당 배열에는 arr의 원소를 정렬된 위치에 삽힙할 것이다.
#4. arr의 각 원소값을 count의 인덱스로 사용해 값을 가져온 후, 해당 값을 다시 result의 인덱스로 사용해 arr의 원소로 저장해준다.
#5. 해당 작업을 마친 후 count[arr[i]]의 값을 1 줄여준다.
result = [0]*(len(arr))
for num in arr :
    idx = count[num]
    result[idx-1] = num
    count[num] -= 1
print(result) # [1, 2, 3, 3, 4, 4, 5, 7, 9]
